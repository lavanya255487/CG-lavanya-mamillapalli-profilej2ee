Development Environment
	- programming on your component/section of the website
		example - login page
	( Practice on your own )
Testing Environment
	- End to End functioning of the website
	( Net practice ) 
Staging Environment
	- mockup production, pre-production
	( Actual stadium of same size as world cup grounds )
Production Environment
	- website running live on the internet
	( World Cup cricket )
	
*************************

Jee - website
	Java installed (1.8)
	Spring tool suite - development
		pre-installed with all the softwares necessary for spring framework/webservice etc
	putty - remote control software ( login/control into remote unix m/c from windows laptop)
	winscp - file uploading software ( upload/copy files from windows to unix)
	maven - build software ( included in Spring tool suite)
		compile - source code (english language ) INTO binary code
		packaging - compress all website code files into SINGLE executable file
	Git - code repository
		versioning system
		
Network of computers
	Types of internet
		By Connection
			wireline : Home internet
			wireless : Phone
					Satellite and towers
		By Size
			Internet = global network of computers
			intranet = university , organization , company
			lan = home

Phone number TO cellphone
	(123)-(222)-12323
IPaddress To Computer

mac Address - H/w identifier, hard coded/fixed
IPAddress - S/w identifier , can change
	Internet protocol address
	4 numbers
	separeted by .
	0-255
	
	123 . 22 . 244 . 11
	123.22.x.x
	subnet - area code identifier
	
	0.0.0.0
	------
	255.255.255.255
	4 billion unique ip addresses
	
	8 billion
	3 billion using internet
		per person more than 1 device
		
	IPV6
	32 digit long - trillions 
	1AF2:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
	x - hexa decimal
		0-9 A-F
port
N/w components
	DHCP
	DNS
	Router
	Load balancer
	
Network debug commands
	ipconfig : ipaddress of your machine
		ifconfig for mac
	ping : remote machine is reachable, round trip time taken to remote machine
	telnet : 
	tracert :
		tracerouter for mac



http://localhost/welcome.html


XML





XML
Extensible Markup Language
HTML
Hyper Text Markup Language



asdsad qweqwe asda 1233asd asd 123

Meta data - Information about Data

Markup - tagging
<address>
	<Name>
		<firstName></firstName>
		<lastName></lastName>
	</Name>
	<street>
		<streetName>asdad</streetName>
		<streetNumber>12345</streetNumber>
	</street>
	<city>asda</city>
	<zip>1233asd</zip>
	<country>asd 123</country>
</address>

Tags : mark information, defines boundary of the info
< > anchor tag
	<name> <street>
	Opening tag <name>
	closing tag </name>
Element : <>
	Root Element : <address> (Can be only 1 root)
	Parent Element : <address> , <street>
	Child Element : <name> , <zip> , <streetName>
	sibling element : 
Attributes : Key-value pair, they are part of element
	single unit of information, that cannot be broken down
	
	<address>
	<Name  age="10"  >
		<firstName></firstName>
		<lastName></lastName>
	</Name>
	<street>
		<streetName>asdad</streetName>
		<streetNumber>12345</streetNumber>
	</street>
	<city>asda</city>
	<zip>1233asd</zip>
	<country>asd 123</country>
</address>

.common-button-graphics{
	color- green
	shape - sqaure
	height -10%
}
.sign-in{
	width - 20%
}
.sign-in-securely{
	width - 40%
}
.add2Cart{
	width - 30%
}
.payment{
	width - 30%
}
.checkout{
	width - 30%
}
.registration{
	width - 30%
}

Events : customer actions on a website (interact)
	mouse :
		move - navigation
		click - selection
	keyboard :
		key press
		key down
		key up
	Html :
		load - open the website
		unload - close the website
		scroll -
		resize -
Event listener :
	Web program (html/css/javascript) can detect these events and then take some action
	
	
	
	Variable : hold data
	int balance=100;
	String name="john";
	boolean active=true;
	float weight = 122.5;
	String[] names={"john","jane"};
	
	var balance=100;
	var name="john";
	var active=true;
	var weight=122.5;
	var names={"john","jane"};
	
methods : processes data
	deposit 10$ : add 10$ to your balanc = 110$
	
	int result=add(10,20);
	public int add(int a, int b){
		return a+b;
	}
	
	var result=add(10,20);
	function add( a, b ){
		var sum=a+b;
		return sum;
	}
	
operators : 
	arithmetic, relational, unary,equal, logical and,
	*+-/,   == != , && ||, <>, ++ --, + -
	var num1=10;
	var num2=20;
	var sum=num1+num2;
	
	
control flow :
	if-else, for, while, do while, switch
	var num1=10;
	var num2=20;
	if( num1 == num2 )
		console.log("they are same");
	else
		console.log("they are different");
	
	for(var i=0; i < 2 ; i++ ){
		console.log("hi");
	}
	I C E - i=0 , true, print hi
	M C E - i=1, true, print hi
	M C E - i=2, false
	
	
	
	Jquery - 
	simplifies Javascript coding
	More ways to access html code -
		id,class attributes and element name
	decouple html and javascript code	
	animation effects in-built

Design or architecutre
	loosely coupled
	tightlty coupled

Car
	loosely coupled system
	
	
$("#sectionSubB").parent()
	
<div id="sectionA">
	<div id="sectionSubA">
		<input id="user" type="text"></input>
	</div>
	<div id="sectionSubB"> hi hello </div>	
</div>

sectionA 
	sectionSubA
		text box user 
	sectionSubB 
			hi hello text mesage




$("#sectionSubB").text();
	// READ texxt : give "hi hello"
	
	
$("#sectionSubB").text("bye bye");

$("#sectionSubA").html();
	// READ html code inside sectionsubA : <input id="user" type="text"></input>
	
// READ/access to customer typed value in the user text box			
$("#user").val();
// WRITE in the user text box			
$("#user").val("this is mandatory");





Simple data transfer between client and server
	Key-value pair
	userid=john&password=john1!&email=j@g.com
	userid=john
	password=john1!
	email=j@g.com
	
Complex data tranfer
	address=123 asdsa qeqwe asdas 123 asd&email=g.com
	
Xml - bulk, complex = meta data = info about data
	<address>
		<streetnumber>123</streetnumber>
		<streetname>asdsa</streetname>
		<city>qeqwe</city>
		<state>asdas</state>
		<zip>123</zip>
		<country>asd</country>
	</address>	
Json - JavaScript Object notation... string version of javascript object
	
	json
	{
		"streetnumber":123,
		"streetname":"asdsa",
		"city":"qeqwe",
		"state":"asdas",
		"zip":123,
		"country":"asd"
	}
	
	javascript object
	{
		streetnumber:123,
		streetname:"asdsa",
		city:"qeqwe",
		state:"asdas",
		zip:123,
		country:"asd"
	}
	
	Java object
	{
		int streetnumber=123;
		String streetname="asdsa";
		String city="qeqwe";
		String state="asdas";
		int zip=123;
		String country="asd";
	}
	
	
	
{
	"name":"john",
	"age":21,
	"loginActive":true,
	"height":5.7,
	"hobbies":[ "playing","reading" ],
	"address":{
		"streetName":"asd",
		"city":"qwe",
		"zip":123
	}
}

traditional data type. numeric, boolean, fraction,alphaNumeric
Arrays
complex data

attribute name and value are separated by :
multiple attribute name and value are separated by ,

Microservice : 
	dev or implement - Rest webservice using JSON exchange


Spring boot project - website

annotation : configuration of the project

1) folder structure 
2) dependancy - libraries/software to support webite development
3) packaging your software - create single installer file - build process - maven
4) Run website - webserver software (tomcat)
5) test website - test script for tessting website




1) who created reference ?   Tomcat (Web server )
Create reference java program
LoginServlet ls=new LoginServlet();

2) who is calling method ? service
ls.doPost()????


webserver : enables your website.. launches program internet... 
	tomcat : free , opensource
	jboss
	glassfish
	weblogic
	websphere
	iis
	
	
Servlet
	init :  initial setup for the servlet program
	service : routes request to either doGet or doPost
	doget : logic / algorithm for the service
	dopost : logic / algorithm for the service
	destroy : cleanup during shutdown
	
	
	
Request
		uid=john&pwd=john123
		json
		imaes
		video
Response
	text		= login success
	binary	= images,video,audio,file
	webpage	= 
		redirect
		forward
	
	
	
	
	
	